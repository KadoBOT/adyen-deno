/**
 * Adyen for Platforms: Notification Configuration API
 * The Notification Configuration API provides endpoints for setting up and testing notifications that inform you of events on your platform, for example when a KYC check or a payout has been completed.  For more information, refer to our [documentation](https://docs.adyen.com/marketpay/marketpay-notifications). ## Authentication To connect to the Notification Configuration API, you must use basic authentication credentials of your web service user. If you don\'t have one, contact our [Support Team](https://support.adyen.com/hc/en-us/requests/new). Then use its credentials to authenticate your request, for example:  ``` curl -U \"ws@MarketPlace.YourMarketPlace\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Notification Configuration API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Notification/v1/createNotificationConfiguration ```
 *
 * The version of the OpenAPI document: 5
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

 
 import { ErrorFieldType } from './errorFieldType.ts';
 import { ExchangeMessage } from './exchangeMessage.ts';

export class TestNotificationConfigurationResponse {
    /**
    * Any error messages encountered.
    */
    'errorMessages'?: Array<string>;
    /**
    * The event types that were tested. >Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.
    */
    'eventTypes': Array<TestNotificationConfigurationResponse.EventTypesEnum>;
    /**
    * The notification message and related response messages.
    */
    'exchangeMessages': Array<ExchangeMessage>;
    /**
    * Contains field validation errors that would prevent requests from being processed.
    */
    'invalidFields'?: Array<ErrorFieldType>;
    /**
    * The ID of the notification subscription configuration.
    */
    'notificationId': number;
    /**
    * A list of messages describing the testing steps.
    */
    'okMessages': Array<string>;
    /**
    * The reference of a request.  Can be used to uniquely identify the request.
    */
    'pspReference': string;
    /**
    * The result code.
    */
    'resultCode'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "errorMessages",
            "baseName": "errorMessages",
            "type": "Array<string>"
        },
        {
            "name": "eventTypes",
            "baseName": "eventTypes",
            "type": "Array<TestNotificationConfigurationResponse.EventTypesEnum>"
        },
        {
            "name": "exchangeMessages",
            "baseName": "exchangeMessages",
            "type": "Array<ExchangeMessage>"
        },
        {
            "name": "invalidFields",
            "baseName": "invalidFields",
            "type": "Array<ErrorFieldType>"
        },
        {
            "name": "notificationId",
            "baseName": "notificationId",
            "type": "number"
        },
        {
            "name": "okMessages",
            "baseName": "okMessages",
            "type": "Array<string>"
        },
        {
            "name": "pspReference",
            "baseName": "pspReference",
            "type": "string"
        },
        {
            "name": "resultCode",
            "baseName": "resultCode",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TestNotificationConfigurationResponse.attributeTypeMap;
    }
}

export namespace TestNotificationConfigurationResponse {
    export enum EventTypesEnum {
        ACCOUNTCLOSED = <any> 'ACCOUNT_CLOSED',
        ACCOUNTCREATED = <any> 'ACCOUNT_CREATED',
        ACCOUNTHOLDERCREATED = <any> 'ACCOUNT_HOLDER_CREATED',
        ACCOUNTHOLDERLIMITREACHED = <any> 'ACCOUNT_HOLDER_LIMIT_REACHED',
        ACCOUNTHOLDERPAYOUT = <any> 'ACCOUNT_HOLDER_PAYOUT',
        ACCOUNTHOLDERSTATUSCHANGE = <any> 'ACCOUNT_HOLDER_STATUS_CHANGE',
        ACCOUNTHOLDERSTORESTATUSCHANGE = <any> 'ACCOUNT_HOLDER_STORE_STATUS_CHANGE',
        ACCOUNTHOLDERUPCOMINGDEADLINE = <any> 'ACCOUNT_HOLDER_UPCOMING_DEADLINE',
        ACCOUNTHOLDERUPDATED = <any> 'ACCOUNT_HOLDER_UPDATED',
        ACCOUNTHOLDERVERIFICATION = <any> 'ACCOUNT_HOLDER_VERIFICATION',
        ACCOUNTUPDATED = <any> 'ACCOUNT_UPDATED',
        BENEFICIARYSETUP = <any> 'BENEFICIARY_SETUP',
        COMPENSATENEGATIVEBALANCE = <any> 'COMPENSATE_NEGATIVE_BALANCE',
        DIRECTDEBITINITIATED = <any> 'DIRECT_DEBIT_INITIATED',
        PAYMENTFAILURE = <any> 'PAYMENT_FAILURE',
        REPORTAVAILABLE = <any> 'REPORT_AVAILABLE',
        SCHEDULEDREFUNDS = <any> 'SCHEDULED_REFUNDS',
        TRANSFERFUNDS = <any> 'TRANSFER_FUNDS',
        TRANSFERFUNDSREFUND = <any> 'TRANSFER_FUNDS_REFUND'
    }
}
