/**
 * Adyen for Platforms: Notifications
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/marketpay/marketpay-notifications).
 *
 * The version of the OpenAPI document: 5
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

 
 import { Amount } from './amount.ts';
 import { BankAccountDetail } from './bankAccountDetail.ts';

export class Transaction {
    'amount'?: Amount;
    'bankAccountDetail'?: BankAccountDetail;
    /**
    * The merchant reference of a related capture.
    */
    'captureMerchantReference'?: string;
    /**
    * The psp reference of a related capture.
    */
    'capturePspReference'?: string;
    /**
    * The date on which the transaction was performed.
    */
    'creationDate'?: Date;
    /**
    * A description of the transaction.
    */
    'description'?: string;
    /**
    * The code of the account to which funds were credited during an outgoing fund transfer.
    */
    'destinationAccountCode'?: string;
    /**
    * The psp reference of the related dispute.
    */
    'disputePspReference'?: string;
    /**
    * The reason code of a dispute.
    */
    'disputeReasonCode'?: string;
    /**
    * The merchant reference of a transaction.
    */
    'merchantReference'?: string;
    /**
    * The psp reference of the related authorisation or transfer.
    */
    'paymentPspReference'?: string;
    /**
    * The psp reference of the related payout.
    */
    'payoutPspReference'?: string;
    /**
    * The psp reference of a transaction.
    */
    'pspReference'?: string;
    /**
    * The code of the account from which funds were debited during an incoming fund transfer.
    */
    'sourceAccountCode'?: string;
    /**
    * The status of the transaction. >Permitted values: `PendingCredit`, `CreditFailed`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.
    */
    'transactionStatus'?: Transaction.TransactionStatusEnum;
    /**
    * The transfer code of the transaction.
    */
    'transferCode'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "amount",
            "baseName": "amount",
            "type": "Amount"
        },
        {
            "name": "bankAccountDetail",
            "baseName": "bankAccountDetail",
            "type": "BankAccountDetail"
        },
        {
            "name": "captureMerchantReference",
            "baseName": "captureMerchantReference",
            "type": "string"
        },
        {
            "name": "capturePspReference",
            "baseName": "capturePspReference",
            "type": "string"
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "destinationAccountCode",
            "baseName": "destinationAccountCode",
            "type": "string"
        },
        {
            "name": "disputePspReference",
            "baseName": "disputePspReference",
            "type": "string"
        },
        {
            "name": "disputeReasonCode",
            "baseName": "disputeReasonCode",
            "type": "string"
        },
        {
            "name": "merchantReference",
            "baseName": "merchantReference",
            "type": "string"
        },
        {
            "name": "paymentPspReference",
            "baseName": "paymentPspReference",
            "type": "string"
        },
        {
            "name": "payoutPspReference",
            "baseName": "payoutPspReference",
            "type": "string"
        },
        {
            "name": "pspReference",
            "baseName": "pspReference",
            "type": "string"
        },
        {
            "name": "sourceAccountCode",
            "baseName": "sourceAccountCode",
            "type": "string"
        },
        {
            "name": "transactionStatus",
            "baseName": "transactionStatus",
            "type": "Transaction.TransactionStatusEnum"
        },
        {
            "name": "transferCode",
            "baseName": "transferCode",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Transaction.attributeTypeMap;
    }
}

export namespace Transaction {
    export enum TransactionStatusEnum {
        Chargeback = <any> 'Chargeback',
        ChargebackCorrection = <any> 'ChargebackCorrection',
        ChargebackCorrectionReceived = <any> 'ChargebackCorrectionReceived',
        ChargebackReceived = <any> 'ChargebackReceived',
        ChargebackReversed = <any> 'ChargebackReversed',
        ChargebackReversedReceived = <any> 'ChargebackReversedReceived',
        Converted = <any> 'Converted',
        CreditFailed = <any> 'CreditFailed',
        CreditReversed = <any> 'CreditReversed',
        CreditReversedReceived = <any> 'CreditReversedReceived',
        Credited = <any> 'Credited',
        DebitFailed = <any> 'DebitFailed',
        DebitReversedReceived = <any> 'DebitReversedReceived',
        Debited = <any> 'Debited',
        DebitedReversed = <any> 'DebitedReversed',
        Fee = <any> 'Fee',
        FundTransfer = <any> 'FundTransfer',
        FundTransferReversed = <any> 'FundTransferReversed',
        ManualCorrected = <any> 'ManualCorrected',
        Payout = <any> 'Payout',
        PayoutReversed = <any> 'PayoutReversed',
        PendingCredit = <any> 'PendingCredit',
        PendingDebit = <any> 'PendingDebit',
        PendingFundTransfer = <any> 'PendingFundTransfer',
        SecondChargeback = <any> 'SecondChargeback',
        SecondChargebackReceived = <any> 'SecondChargebackReceived'
    }
}
